{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["requestFlag","lastword","MyResponsiveRadar","data","keys","indexBy","maxValue","margin","top","right","bottom","left","curve","borderWidth","borderColor","from","modifiers","gridLevels","gridShape","gridLabelOffset","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","theme","enableDotLabel","dotLabelYOffset","colors","fillOpacity","blendMode","animate","motionConfig","isInteractive","axis","ticks","text","fill","grid","line","stroke","strokeWidth","strokeDasharray","dots","App","initScore","dimention","score","useState","setScore","setText","className","type","id","cols","rows","placeholder","spellCheck","onChange","event","target","value","length","substr","replace","onKeyUp","e","key","fetch","body","method","mode","then","status","json","Error","console","log","tmp","mean","chartData","technology","toFixed","aesthetics","experience","future","industry","livelihood","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39b5e44c.chunk.js","sourcesContent":["import \"./App.scss\";\r\n\r\nimport { ResponsiveRadar } from \"@nivo/radar\";\r\nimport { useState } from \"react\";\r\nlet requestFlag = true;\r\nlet lastword = \"\";\r\n\r\nconst MyResponsiveRadar = ({ data /* see data tab */ }) => (\r\n  <ResponsiveRadar\r\n    data={data}\r\n    keys={[\"score\"]}\r\n    indexBy=\"dimention\"\r\n    maxValue={\"1\"}\r\n    margin={{ top: 40, right: 80, bottom: 40, left: 80 }}\r\n    curve=\"catmullRomClosed\"\r\n    borderWidth={2}\r\n    borderColor={{ from: \"color\", modifiers: [] }}\r\n    gridLevels={3}\r\n    gridShape=\"circular\"\r\n    gridLabelOffset={36}\r\n    enableDots={true}\r\n    dotSize={11}\r\n    dotColor={{ from: \"color\", modifiers: [] }}\r\n    dotBorderWidth={0}\r\n    dotBorderColor={{ theme: \"background\" }}\r\n    enableDotLabel={true}\r\n    dotLabelYOffset={-12}\r\n    colors={\"#FFF\"}\r\n    fillOpacity={0.3}\r\n    blendMode=\"normal\"\r\n    animate={false}\r\n    motionConfig=\"wobbly\"\r\n    isInteractive={true}\r\n    theme={{\r\n      axis: {\r\n        ticks: {\r\n          text: {\r\n            fill: \"#DDD\"\r\n          }\r\n        }\r\n      },\r\n      grid: {\r\n        line: {\r\n          stroke: \"#AAA\",\r\n          strokeWidth: 2,\r\n          strokeDasharray: \"4 4\"\r\n        }\r\n      },\r\n      dots: {\r\n        text: {\r\n          fill: \"#AAA\"\r\n        }\r\n      }\r\n    }}\r\n  />\r\n);\r\n\r\nfunction App() {\r\n  const initScore = [\r\n    {\r\n      dimention: \"technology\",\r\n      score: 0\r\n    },\r\n    {\r\n      dimention: \"aesthetics\",\r\n      score: 0\r\n    },\r\n    {\r\n      dimention: \"experience\",\r\n      score: 0\r\n    },\r\n    {\r\n      dimention: \"future\",\r\n      score: 0\r\n    },\r\n    {\r\n      dimention: \"industry\",\r\n      score: 0\r\n    },\r\n    {\r\n      dimention: \"livelihood\",\r\n      score: 0\r\n    }\r\n  ];\r\n  const [score, setScore] = useState(initScore);\r\n  const handleKeyUp = e => {\r\n    // console.log(\"ðŸš€ ~ file: App.js ~ line 106 ~ App ~ e \", e);\r\n    if (\r\n      requestFlag &\r\n      ((e.key === \" \") |\r\n        (e.key === \"Enter\") |\r\n        (e.key === \".\") |\r\n        (e.key === \",\") |\r\n        (e.key === \"?\") |\r\n        ((e.key === \"Backspace\") & (lastword === \" \")))\r\n    ) {\r\n      fetch(\r\n        \"https://1521484829896861.cn-hangzhou.fc.aliyuncs.com/2016-08-15/proxy/test2.LATEST/test2/\",\r\n        {\r\n          body: text,\r\n          method: \"POST\",\r\n          mode: \"cors\"\r\n        }\r\n      )\r\n        .then(data => {\r\n          if (data.status === 200) {\r\n            return data.json();\r\n          }\r\n          throw Error;\r\n        })\r\n        .then(data => {\r\n          // document.write(JSON.stringify(data));\r\n          console.log(data);\r\n          const tmp = data.mean;\r\n          const chartData = [\r\n            {\r\n              dimention: \"technology\",\r\n              score: tmp.technology.toFixed(2)\r\n            },\r\n            {\r\n              dimention: \"aesthetics\",\r\n              score: tmp.aesthetics.toFixed(2)\r\n            },\r\n            {\r\n              dimention: \"experience\",\r\n              score: tmp.experience.toFixed(2)\r\n            },\r\n            {\r\n              dimention: \"future\",\r\n              score: tmp.future.toFixed(2)\r\n            },\r\n            {\r\n              dimention: \"industry\",\r\n              score: tmp.industry.toFixed(2)\r\n            },\r\n            {\r\n              dimention: \"livelihood\",\r\n              score: tmp.livelihood.toFixed(2)\r\n            }\r\n          ];\r\n          setScore(chartData);\r\n          requestFlag = false;\r\n        });\r\n    }\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  const handleTextChange = event => {\r\n    if (event.target.value.length !== text.length) {\r\n      lastword = text.substr(text.length - 1, 1);\r\n      setText(\r\n        event.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, \"\")\r\n      );\r\n      if (text.length < 15) {\r\n        setScore(initScore);\r\n        requestFlag = false;\r\n      } else {\r\n        requestFlag = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App container\">\r\n      <div className=\"data-canvas\">\r\n        <MyResponsiveRadar data={score}></MyResponsiveRadar>\r\n      </div>\r\n      <div className=\"input\">\r\n        <div className=\"input-box-bg\">\r\n          <textarea\r\n            type=\"text\"\r\n            id=\"main-input-box\"\r\n            cols=\"25\"\r\n            rows=\"6\"\r\n            placeholder=\"Type your Description here\"\r\n            spellCheck=\"false\"\r\n            onChange={handleTextChange}\r\n            value={text}\r\n            onKeyUp={handleKeyUp}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}