{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["requestFlag","lastword","MyResponsiveRadar","data","keys","indexBy","maxValue","margin","top","right","bottom","left","curve","borderWidth","borderColor","from","modifiers","gridLevels","gridShape","gridLabelOffset","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","theme","enableDotLabel","dotLabelYOffset","colors","fillOpacity","blendMode","animate","motionConfig","isInteractive","axis","ticks","text","fill","grid","line","stroke","strokeWidth","strokeDasharray","dots","App","initScore","dimention","score","useState","setScore","setText","className","type","id","cols","rows","placeholder","spellcheck","onChange","event","target","value","length","substr","replace","onKeyUp","e","key","fetch","body","method","then","status","json","Error","tmp","mean","chartData","technology","toFixed","aesthetics","experience","future","industry","livelihood","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAIIA,GAAc,EACdC,EAAW,GAETC,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACxB,cAAC,IAAD,CACEA,KAAMA,EACNC,KAAM,CAAC,SACPC,QAAQ,YACRC,SAAS,OACTC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,MAAM,mBACNC,YAAa,EACbC,YAAa,CAAEC,KAAM,QAASC,UAAW,IACzCC,WAAY,EACZC,UAAU,WACVC,gBAAiB,GACjBC,YAAY,EACZC,QAAS,GACTC,SAAU,CAAEP,KAAM,QAASC,UAAW,IACtCO,eAAgB,EAChBC,eAAgB,CAAEC,MAAO,cACzBC,gBAAgB,EAChBC,iBAAkB,GAClBC,OAAQ,OACRC,YAAa,GACbC,UAAU,SACVC,SAAS,EACTC,aAAa,SACbC,eAAe,EACfR,MAAO,CACLS,KAAM,CACJC,MAAO,CACLC,KAAM,CACJC,KAAM,UAIZC,KAAM,CACJC,KAAM,CACJC,OAAQ,OACRC,YAAa,EACbC,gBAAiB,QAGrBC,KAAM,CACJP,KAAM,CACJC,KAAM,aAoIDO,MA7Hf,WACE,IAAMC,EAAY,CAChB,CACEC,UAAW,aACXC,MAAO,GAET,CACED,UAAW,aACXC,MAAO,GAET,CACED,UAAW,aACXC,MAAO,GAET,CACED,UAAW,SACXC,MAAO,GAET,CACED,UAAW,WACXC,MAAO,GAET,CACED,UAAW,aACXC,MAAO,IAxBE,EA2BaC,mBAASH,GA3BtB,mBA2BNE,EA3BM,KA2BCE,EA3BD,OAoFWD,mBAAS,IApFpB,mBAoFNZ,EApFM,KAoFAc,EApFA,KAqGb,OACE,sBAAKC,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAAmBhD,KAAM4C,MAE3B,qBAAKI,UAAU,QAAf,SACE,qBAAKA,UAAU,eAAf,SACE,0BACEC,KAAK,OACLC,GAAG,iBACHC,KAAK,KACLC,KAAK,IACLC,YAAY,6BACZC,WAAW,QACXC,SA9Be,SAAAC,GACnBA,EAAMC,OAAOC,MAAMC,SAAW1B,EAAK0B,SACrC7D,EAAWmC,EAAK2B,OAAO3B,EAAK0B,OAAS,EAAG,GACxCZ,EACES,EAAMC,OAAOC,MAAMG,QAAQ,mCAAoC,KAE9D5B,EAAK0B,OAAO,IACbb,EAASJ,GACT7C,GAAc,GAEdA,GAAc,IAqBV6D,MAAOzB,EACP6B,QAzFU,SAAAC,GAGhBlE,GACY,MAAVkE,EAAEC,IACS,UAAVD,EAAEC,IACQ,MAAVD,EAAEC,IACQ,MAAVD,EAAEC,IACQ,MAAVD,EAAEC,IACM,cAARD,EAAEC,IAA+B,MAAXlE,IAEzBmE,MAAM,6BAA8B,CAClCC,KAAMjC,EACNkC,OAAQ,SAEPC,MAAK,SAAApE,GACJ,GAAoB,MAAhBA,EAAKqE,OACP,OAAOrE,EAAKsE,OAEd,MAAMC,SAEPH,MAAK,SAAApE,GAGJ,IAAMwE,EAAMxE,EAAKyE,KACXC,EAAY,CAChB,CACE/B,UAAW,aACXC,MAAO4B,EAAIG,WAAWC,QAAQ,IAEhC,CACEjC,UAAW,aACXC,MAAO4B,EAAIK,WAAWD,QAAQ,IAEhC,CACEjC,UAAW,aACXC,MAAO4B,EAAIM,WAAWF,QAAQ,IAEhC,CACEjC,UAAW,SACXC,MAAO4B,EAAIO,OAAOH,QAAQ,IAE5B,CACEjC,UAAW,WACXC,MAAO4B,EAAIQ,SAASJ,QAAQ,IAE9B,CACEjC,UAAW,aACXC,MAAO4B,EAAIS,WAAWL,QAAQ,KAGlC9B,EAAS4B,GACT7E,GAAc,gBC7HTqF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d48e7f7d.chunk.js","sourcesContent":["import \"./App.scss\";\n\nimport { ResponsiveRadar } from \"@nivo/radar\";\nimport { useState } from \"react\";\nlet requestFlag = true;\nlet lastword = \"\";\n\nconst MyResponsiveRadar = ({ data /* see data tab */ }) => (\n  <ResponsiveRadar\n    data={data}\n    keys={[\"score\"]}\n    indexBy=\"dimention\"\n    maxValue=\"auto\"\n    margin={{ top: 40, right: 80, bottom: 40, left: 80 }}\n    curve=\"catmullRomClosed\"\n    borderWidth={2}\n    borderColor={{ from: \"color\", modifiers: [] }}\n    gridLevels={3}\n    gridShape=\"circular\"\n    gridLabelOffset={36}\n    enableDots={true}\n    dotSize={11}\n    dotColor={{ from: \"color\", modifiers: [] }}\n    dotBorderWidth={0}\n    dotBorderColor={{ theme: \"background\" }}\n    enableDotLabel={true}\n    dotLabelYOffset={-12}\n    colors={\"#FFF\"}\n    fillOpacity={0.3}\n    blendMode=\"normal\"\n    animate={true}\n    motionConfig=\"wobbly\"\n    isInteractive={true}\n    theme={{\n      axis: {\n        ticks: {\n          text: {\n            fill: \"#DDD\"\n          }\n        }\n      },\n      grid: {\n        line: {\n          stroke: \"#AAA\",\n          strokeWidth: 2,\n          strokeDasharray: \"4 4\"\n        }\n      },\n      dots: {\n        text: {\n          fill: \"#AAA\"\n        }\n      }\n    }}\n  />\n);\n\nfunction App() {\n  const initScore = [\n    {\n      dimention: \"technology\",\n      score: 0\n    },\n    {\n      dimention: \"aesthetics\",\n      score: 0\n    },\n    {\n      dimention: \"experience\",\n      score: 0\n    },\n    {\n      dimention: \"future\",\n      score: 0\n    },\n    {\n      dimention: \"industry\",\n      score: 0\n    },\n    {\n      dimention: \"livelihood\",\n      score: 0\n    }\n  ]\n  const [score, setScore] = useState(initScore);\n  const handleKeyUp = e => {\n    // console.log(\"ðŸš€ ~ file: App.js ~ line 106 ~ App ~ e \", e);\n    if (\n      requestFlag &\n      ((e.key === \" \") |\n        (e.key === \"Enter\") |\n        (e.key === \".\") |\n        (e.key === \",\") |\n        (e.key === \"?\")|\n        (e.key===\"Backspace\" & lastword===\" \"))\n    ) {\n      fetch(\"http://fc.drafff.art/test1\", {\n        body: text,\n        method: \"POST\"\n      })\n        .then(data => {\n          if (data.status === 200) {\n            return data.json();\n          }\n          throw Error;\n        })\n        .then(data => {\n          // document.write(JSON.stringify(data));\n          // console.log(data);\n          const tmp = data.mean;\n          const chartData = [\n            {\n              dimention: \"technology\",\n              score: tmp.technology.toFixed(2)\n            },\n            {\n              dimention: \"aesthetics\",\n              score: tmp.aesthetics.toFixed(2)\n            },\n            {\n              dimention: \"experience\",\n              score: tmp.experience.toFixed(2)\n            },\n            {\n              dimention: \"future\",\n              score: tmp.future.toFixed(2)\n            },\n            {\n              dimention: \"industry\",\n              score: tmp.industry.toFixed(2)\n            },\n            {\n              dimention: \"livelihood\",\n              score: tmp.livelihood.toFixed(2)\n            }\n          ];\n          setScore(chartData);\n          requestFlag = false;\n        });\n    }\n  };\n  const [text, setText] = useState(\"\");\n  const handleTextChange = event => {\n    if (event.target.value.length !== text.length) {\n      lastword = text.substr(text.length - 1, 1);\n      setText(\n        event.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, \"\")\n      );\n      if(text.length<15){\n        setScore(initScore)\n        requestFlag = false;\n      }else{\n        requestFlag = true;\n      }\n      \n    }\n  };\n\n  return (\n    <div className=\"App container\">\n      <div className=\"data-canvas\">\n        <MyResponsiveRadar data={score}></MyResponsiveRadar>\n      </div>\n      <div className=\"input\">\n        <div className=\"input-box-bg\">\n          <textarea\n            type=\"text\"\n            id=\"main-input-box\"\n            cols=\"25\"\n            rows=\"6\"\n            placeholder=\"Type your Description here\"\n            spellcheck=\"false\"\n            onChange={handleTextChange}\n            value={text}\n            onKeyUp={handleKeyUp}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}